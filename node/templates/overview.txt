{% extends "templates/testshell.html" %}
{% block markdown %}	

Intro
-----				

Render math without needing to know any $display(\LaTeX)$. Mathematical expressions like 3^12 and sqrt(3)/3 will be converted to $display(\LaTeX)$ and then displayed using $display(\KaTeX)$ as $3^12$ and $sqrt(3)/3$. The non-math text will be treated as markdown (using markedjs at least for now) so you can use *italics*, **bold**, headers, and more.

The textarea on the left is the source that generates the output on the right. You can change parts to see how the output changes. The syntax might be a bit confusing to an outsider, but can easily change as better options become apparent.

Solve
-----

Many expressions can be computed before rendering if desired. Easily evaluate user inputs or simply save yourself the trouble of calculating the answer.

$2+2==(2+2)[A]$

Differentiate $f(x)=$ $input()$[H]

$ddx(H)==(ddx(H))[A]$

Move this slider to see how it impacts the following computations: $range(7,20)$[J]

$sin(=(J*pi/6)[A])==(sin(J*pi/6))[A]$

$max(3,14,5,2+J,8-3)==(max(3,14,5,2+J,8-3))[A]$

$J choose 3==(J choose 3)[A]$

$abs(3-J)==(abs(3-J))[A]$

$gcd(120,J)==(gcd(120,J))[A]$



For more info, go to the [solve](https://inlinemath.com/solve) section.


Plots
-----

Many functions can be plotted to produce a graph similar to the following:

$$plot(y=x^2-5)$$

For more info, go to the [plots](https://inlinemath.com/plots) section.

Trees
-----

Expressions can be parsed and displayed as a tree of operations. 

$$tree(y=x^2+2*x+5)$$

For more info, go to the [trees](https://inlinemath.com/trees) section.

Code
-----

Code can be displayed with any mathematical expressions automatically displayed as math. 

```
var x = 3^10+4;
var theta = pi/6;
var y = Math.cos(theta);
```

For more info, go to the [code](https://inlinemath.com/code) section.

Variables
-----

Create variables that can be called later.

$7$![A]
$11$![B]
$A+2*B$

For more info, go to the [variables](https://inlinemath.com/variables) section.

Functions
-----

Define custom functions that can used later. There is at least some support for recursively defined functions.

$f(x)=$ $input()$[K]
$=(f(x)=K)[D]$!

$f(3)==(f(3))[A]$

$g(0)=$ $input()$[L]

$g(1)=$ $input()$[M]

$g(x)=$ $input()$[N]

$=(g(0)=L)[D]$!
$=(g(1)=M)[D]$!
$=(g(x)=N)[D]$!

$g(10)==(g(10))[A]$

For more info, go to the [functions](https://inlinemath.com/functions) section.

Inputs
-----

Create user inputs that will be rendered automatically.

Range slider: $range(1,7)$[F] $F$

$input()$[G]

$number(2,6)$[E]

$radio(F+x^E,F-sqrt(x),G+x)$[D] $=(h(x)=D)[D]$!

Flip? $checkbox(-1,1)$[C]

$$plot(y=C*h(x))[A]$$




For more info, go to the [inputs](https://inlinemath.com/inputs) section.




More Features
-------------

If you already have $display(\LaTeX)$ code, you can go straight to $display(\KaTeX)$ to use any of its supported commands like matrices: $display(\begin{pmatrix}a & b \\c & d\end{pmatrix})$.

If you simply want to generate $display(\LaTeX)$ code to use elsewhere, you can do that. $$latex(3^12/theta)$$

If you select a group of text, it should be possible to copy the HTML output, the latex source, or the original input by clicking the appropriate button on the left.


About
-----

Everything is done client-side with a js file that gzips to x kB and a wasm file that gzips to y kB. Katex is required to turn Latex into HTML and that adds z kB of JS and a kB of CSS zipped. MarkedJS renders the markdown with c kB of JS. Prism JS is needed to highlight/parse code and adds another b kB.

Modern browsers should be fully supported. I have not worried about accessibility yet, but that shouldn't be a problem. 

Speed shouldn't be an issue for most uses on decent hardware. At some point I will work on ways to break up large files.

Obviously there are still bugs and incomplete features, but a version that is ready for a public beta is coming by year end.








{% endblock %}